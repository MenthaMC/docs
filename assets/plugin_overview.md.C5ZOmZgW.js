import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.Z1I7rvLq.js";const E=JSON.parse('{"title":"插件系统概述","description":"","frontmatter":{"title":"插件系统概述"},"headers":[],"relativePath":"plugin/overview.md","filePath":"plugin/overview.md"}'),t={name:"plugin/overview.md"};function l(p,s,h,k,r,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="插件系统概述" tabindex="-1">插件系统概述 <a class="header-anchor" href="#插件系统概述" aria-label="Permalink to &quot;插件系统概述&quot;">​</a></h1><p>该插件系统并不是Bukkit和Paper的Java插件系统，而是LemonMint在1.21.8-R0.1版本中添加的新特性。该插件系统抛弃了传统的Java语言开发插件，转为JavaScript脚本插件，其目的是为了让编写插件更快速更简单。（注：Mint没有该特性）</p><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h2><p>该插件系统不需要引入Jar包也不需要用什么构建系统，一个文件就可以搞定，而且支持ESM语法（当然CommonJS不支持）。</p><blockquote><p>注：name和version是必须写的，不然会报错。</p></blockquote><p>在提交<a href="https://github.com/MenthaMC/LemonMint/commit/786f5ab93ef0c1bd68e811954138f17bfc8eb9d3" target="_blank" rel="noreferrer">786f5ab</a>中，已经取消了installer以函数的形式被注册，转变为installer为变量，并且获取插件单例可以通过全局变量<code>plugin</code>获取</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> installer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onDisabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TestPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, installer }</span></span></code></pre></div><p>以上就是最简单的插件示例，在初始化加载的时候以及后面执行pl（plugins命令的简写）都能看到该插件。（插件如果是绿色字体，那么就是已经启用了，反之为禁用）</p>`,8)]))}const c=a(t,[["render",l]]);export{E as __pageData,c as default};
